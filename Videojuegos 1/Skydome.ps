Texture2D shaderTexture[2];
SamplerState SampleType;

cbuffer MaterialBuffer : register(b1)
{
	float4 materialColor;
	float escalar;
	float padding3;
	float padding1;
	float padding2;
};

cbuffer LightBuffer : register(b2)
{
    float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float padding;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};

float4 PixelProgram(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float4 textureColor2;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	color = ambientColor;

	textureColor = shaderTexture[0].Sample(SampleType, input.tex);
	textureColor2 = shaderTexture[1].Sample(SampleType, input.tex);

	//Invert the light direction for calculations
	lightDir = -lightDirection;

	//Calculate the amount of light on this pixel
	lightIntensity = saturate(dot(input.normal,lightDir));

	//	if(lightIntensity > 0.0f)
	//	{
		//Determine the final amount of diffuse color based on the diffuse color combined with the light intensity
		//Se suma las dos luces
		//color += saturate(diffuseColor * lightIntensity);
	//	}

	color = lerp(textureColor,textureColor2,escalar);

    return color;
}
