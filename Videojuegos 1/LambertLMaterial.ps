cbuffer MaterialBuffer : register(b1)
{
	float4 materialColor;
};

cbuffer LightBuffer : register(b2)
{
    float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float padding;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
	float4 normal : NORMAL;
};

float4 PixelProgram(PixelInputType input) : SV_TARGET
{
	float4 finalcolor;
	float3 lightDir;
	float lightIntensity;
	finalcolor = ambientColor;


	//Invert the light direction for calculations
	lightDir = -lightDirection;

	//Calculate the amount of light on this pixel
	lightIntensity = saturate(dot(input.normal,lightDir));

	if(lightIntensity > 0.0f)
	{
	//Determine the final amount of diffuse color based on the diffuse color combined with the light intensity
	//Se suma las dos luces
	finalcolor += saturate(diffuseColor * lightIntensity);
	}

	finalcolor = finalcolor * materialColor;

	//finalcolor = input.normal;
    //return materialColor * input.vertexColor;
	return finalcolor;
	
}