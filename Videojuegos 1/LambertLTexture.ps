Texture2D shaderTexture;
SamplerState SampleType;

cbuffer MaterialBuffer : register(b1)
{
	float4 materialColor;
};

cbuffer LightBuffer : register(b2)
{
    float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float padding;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};

float4 PixelProgram(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	color = ambientColor;

	textureColor = shaderTexture.Sample(SampleType, input.tex);

	//Invert the light direction for calculations
	lightDir = -lightDirection;

	//Calculate the amount of light on this pixel
	lightIntensity = saturate(dot(input.normal,lightDir));

//	if(lightIntensity > 0.0f)
//	{
	//Determine the final amount of diffuse color based on the diffuse color combined with the light intensity
	//Se suma las dos luces
	//color += saturate(diffuseColor * lightIntensity);
//	}

	color =float4(0.0f,0.1f,0.3f,0.2f); //textureColor * materialColor*float4(1.0f,1.0f,1.0f,0.2f);

    return color;
}
