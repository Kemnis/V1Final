//////////////////////////
// Filename: Model.ps
//////////////////////////

///////////////
//GLOBALS//////
///////////////
Texture2D shaderTexture;
Texture2D shaderTexture2;
SamplerState SampleType;

cbuffer LightBuffer{
    float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float ColorDifR;
	float ColorDifG;
	float ColorDifB;
	float ColorDifA;
	float padding;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};


/////////////////////
// Pixel Shader
/////////////////////
float4 ModelPixelShader(PixelInputType input) : SV_TARGET
{

	//return float4(ColorDifR,ColorDifG,ColorDifB,ColorDifA);

    float4 textureColor;
    float4 textureColor2;
	float3 lightDir;
	float lightIntensity;
	float4 color;

	//Sample the pixel color from the texture using the sampler at this texture coordinate location
	textureColor = shaderTexture.Sample(SampleType,input.tex);
	textureColor2 = shaderTexture2.Sample(SampleType,input.tex);

	 // Set the default output color to the ambient light value for all pixels.
    color = ambientColor;

	//Invert the light direction for calculations
	lightDir = -lightDirection;

	//Calculate the amount of light on this pixel
	lightIntensity = saturate(dot(input.normal,lightDir));


	//IMPORTANTE SABER ANTES DE...
	//Para combinar la luz difusa y la luz ambiental, HAY QUE SABER SI LA NORMAL DEL VECTOR ESTA
	//RECIBIENDO LUZ DIFUSSA, SI NO ESTA RECIBIENDO LUZ DIFUSSA NO ES NECESARIO COMBINARLO, PUEDE HABER PROBLEMAS SI LO COMMBINA
	//NECESESARIO ESTA INSTRUCCION
	if(lightIntensity > 0.0f)
	{
	//Determine the final amount of diffuse color based on the diffuse color combined with the light intensity
	//Se suma las dos luces
	color += saturate(diffuseColor * lightIntensity);
	}


	//Multiply the texture pixel and the final diffuse color to get the final pixel color result
	color = color * textureColor * textureColor2 ;

	return color;
	// *float4 (ColorDifR,ColorDifG,ColorDifB,ColorDifA);
}